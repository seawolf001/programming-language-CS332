(defun memberList(X L)
( 
	cond
		((null L) nil)
		((equal X (car L)) t)
		(t (memberList X (cdr L)))
)
)  	

(defun uniann (L1 L2)
	(cond
		((null L1) L2)
		((null L2) L1)
		((memberList (car L1) L2) (uniann (cdr L1) L2))
		(t (cons (car L1) (uniann (cdr L1) L2)))
	)
)

(defun intersectionnn (L1 L2)
	(cond
		((null L1 ) nil)
		((null L2 ) nil)
		((memberList (car L1) L2) (cons (car L1) (intersectionnn (cdr L1) L2)))
		(t (intersectionnn (cdr L1) L2))
	)
)

(defun subtractionnn (L1 L2)
	(cond
		((null L1) nil)
		((null L2) L1)
		((memberList (car L1) L2) (subtractionnn (cdr L1) L2))
		( t (cons (car L1) (subtractionnn (cdr L1) L2)))
	)
)
(defun xorrr(L1 L2)
	(cond 
		((null L1 ) L2)
		((null L2 ) L1)
		(t (subtractionnn (uniann L1 L2) (intersectionnn L1 L2)))
	)

)
(terpri)
(write "demontrating union of (1 2 3 (4 5)) and ((4 5) 6 7) ")
(terpri)
(write (uniann '(1 2 3 (4 5)) '((4 5) 6 7)))
(terpri)
(terpri)
(write "demontrating intersection of (1 2 3 (4 5)) and ((4 5) 6 7) ")
(terpri)
(write (intersectionnn '(1 2 3 (4 5)) '((4 5) 6 7)))
(terpri)
(terpri)
(write "demonstrating subtraction of (3 4) from (1 2 (3 4) 5 6) ")
(terpri)
(write (subtractionnn '(1 2 (3 4) 5 6) '((3 4))))
(terpri)
(terpri)
(write "demonstrating xor of (1 2 3 (4 5)) and ((4 5) 6 7) ")
(terpri)
(write (xorrr '(1 2 3 (4 5)) '((4 5) 6 7)))
